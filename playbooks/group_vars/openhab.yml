---
freebsd_pkg_repo:
  FreeBSD:
    enabled: "false"
    state: present
  FreeBSD_latest:
    enabled: "true"
    state: present
    url: pkg+https://pkg.FreeBSD.org/${ABI}/latest
    signature_type: fingerprints
    fingerprints: /usr/share/keys/pkg
    mirror_type: srv
apt_repo_enable_apt_transport_https: yes
apt_repo_keys_to_add:
  # XXX bintray repo is broken.
  # https://community.openhab.org/t/the-repository-https-dl-bintray-com-openhab-apt-repo2-stable-release-is-not-signed-raspberry-pi-3/60047/17
  - https://bintray.com/user/downloadSubjectPublicKey?username=openhab
  - https://repos.influxdata.com/influxdb.key
  - https://packages.grafana.com/gpg.key
apt_repo_to_add:
  - "ppa:mosquitto-dev/mosquitto-ppa"
  - "deb https://openhab.jfrog.io/openhab/openhab-linuxpkg testing main"
  - "deb https://repos.influxdata.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
  - "deb https://packages.grafana.com/oss/deb stable main"
project_java_packages:
  FreeBSD:
    - java/openjdk8-jre
  Debian:
    - openjdk-8-jdk
java_packages: "{{ project_java_packages[ansible_os_family] }}"

# ____________________ openhab
project_openhab_extra_group:
  FreeBSD: dialer
  Debian: dialout
openhab_extra_groups:
  - name: "{{ project_openhab_extra_group[ansible_os_family] }}"
openhab_configs:
  - name: services/addons.cfg
    state: present
    content: |
      package = standard
      remote = true
      binding = astro,mqtt,ntp
      ui = basic,paper
      persistence = rrd4j
      action = mail
      transformation = jsonpath,map
      voice = voicerss
  - name: services/basicui.cfg
    content: |
      org.eclipse.smarthome.basicui:defaultSitemap=demo
      org.eclipse.smarthome.basicui:iconType=svg
  - name: services/classicui.cfg
    content: |
      org.eclipse.smarthome.classicui:defaultSitemap=demo
  - name: services/logging.cfg
    content: |
      pattern=%date{ISO8601} - %-25logger: %msg%n
  - name: services/rrd4j.cfg
    content: ""
  - name: services/runtime.cfg
    content: |
      org.eclipse.smarthome.core.localeprovider:language=en
  - name: services/foo.cfg
    state: absent
    content: |
      org.eclipse.smarthome.core.localeprovider:language=en
flags_openhab:
  FreeBSD: ""
  Debian: |
    EXTRA_JAVA_OPTS=
    OPENHAB_HTTP_PORT=8080
openhab_flags: "{{ flags_openhab[ansible_os_family] }}"

# ____________________ influxdb
influxdb_admin_username: "{{ project_influxdb_admin_username }}"
influxdb_admin_password: "{{ project_influxdb_admin_password }}"
influxdb_tls: no
influxdb_include_x509_certificate: no
influxdb_bind_address: 127.0.0.1:8086
influxdb_databases:
  - database_name: "{{ project_influxdb_database }}"
    state: present
influxdb_users: "{{ project_influxdb_users }}"
influxdb_config: |
  reporting-disabled = true
  # this one is bind address for backup process
  bind-address = "127.0.0.1:8088"
  [meta]
    dir = "{{ influxdb_db_dir }}/meta"
  [data]
    dir = "{{ influxdb_db_dir }}/data"
    wal-dir = "{{ influxdb_db_dir }}/wal"
    query-log-enabled = true
  [coordinator]
  [retention]
  [shard-precreation]
  [monitor]
  [http]
    auth-enabled = true
    bind-address = "{{ influxdb_bind_address }}"
    https-enabled = false
    log-enabled = true
    access-log-path = "{{ influxdb_log_dir }}/access.log"
  [ifql]
  [logging]
  [subscriber]
  [[graphite]]
  [[collectd]]
  [[opentsdb]]
  [[udp]]
  [tls]

# ____________________ grafana
project_flags_grafana:
  FreeBSD: 'grafana_conf="{{ grafana_conf_file }}"'
  Debian: ""
grafana_plugins: []
grafana_flags: "{{ project_flags_grafana[ansible_os_family] }}"
grafana_admin_user: "{{ project_grafana_admin_user }}"
grafana_admin_password: "{{ project_grafana_admin_password }}"
grafana_addr: "{{ ansible_default_ipv4['address'] }}"
grafana_provisioning_files:
  - name: datasources/influxdb.yml
    state: present
    content: |
      apiVersion: 1
      datasources:
        - name: InfluxDB
          type: influxdb
          access: proxy
          database: "{{ project_influxdb_database }}"
          user: "{{ project_influxdb_user['grafana'].user_name }}"
          password: "{{ project_influxdb_user['grafana'].user_password }}"
          url: http://localhost:8086
          jsonData:
            httpMode: GET
grafana_config: |
  [paths]
  data = {{ grafana_db_dir }}
  logs = {{ grafana_log_dir }}
  plugins = /var/db/grafana/plugins
  provisioning = {{ grafana_provisioning_dir }}
  [server]
    domain = {{ ansible_default_ipv4.address }}
    root_url = %(protocol)s://%(domain)s/grafana/
  [database]
  log_queries =
  [session]
  [dataproxy]
  [analytics]
  [security]
  admin_user = {{ grafana_admin_user }}
  admin_password = {{ grafana_admin_password }}
  disable_gravatar = true
  [snapshots]
  [dashboards]
  [users]
  [auth]
  [auth.anonymous]
  [auth.github]
  [auth.google]
  [auth.generic_oauth]
  [auth.grafana_com]
  [auth.proxy]
  [auth.basic]
  enabled = true
  [auth.ldap]
  [smtp]
  [emails]
  [log]
  [log.console]
  [log.file]
  [log.syslog]
  [alerting]
  [metrics]
  [metrics.graphite]
  [tracing.jaeger]
  [grafana_com]
  [external_image_storage]
  [external_image_storage.s3]
  [external_image_storage.webdav]
  [external_image_storage.gcs]
  [external_image_storage.azure_blob]
  [external_image_storage.local]

# ____________________ telegraf
telegraf_config: |
  [global_tags]
  [agent]
    interval = "10s"
    round_interval = true
    metric_batch_size = 1000
    metric_buffer_limit = 10000
    collection_jitter = "0s"
    flush_interval = "10s"
    flush_jitter = "0s"
    precision = ""
    debug = false
    quiet = false
    logfile = "{{ telegraf_log_dir }}/telegraf.log"
    hostname = "{{ ansible_hostname }}"
    omit_hostname = false
  [[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false
  [[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]
  [[inputs.diskio]]
  [[inputs.kernel]]
  [[inputs.mem]]
  [[inputs.processes]]
  [[inputs.socket_listener]]
    service_address = "tcp://127.0.0.1:8094"
    data_format = "influx"
  [[inputs.influxdb]]
    urls = [
      "http://localhost:8086/debug/vars"
    ]
    insecure_skip_verify = true
  # [[inputs.swap]]
  # broken at the moment. https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=240570
  [[inputs.system]]
  [[inputs.mqtt_consumer]]
    servers = ["tcp://127.0.0.1:1883"]
    topics = [
      "homie/#"
    ]
    # topic_tag = "topic"
    qos = 0
    client_id = "telegraf"

  [[outputs.influxdb]]
    urls = ["http://127.0.0.1:8086"]
    database = "{{ project_influxdb_database }}"
    username = "{{ project_influxdb_user['telegraf'].user_name }}"
    password = "{{ project_influxdb_user['telegraf'].user_password }}"
    skip_database_creation = true
    insecure_skip_verify = true

# ____________________ mosquitto
mosquitto_bind_address: "{{ project_mosquitto_bind_address }}"
mosquitto_config: |
  user {{ mosquitto_user }}
  pid_file {{ mosquitto_pid_file }}
  log_dest syslog
  autosave_interval 1800
  persistence true
  persistence_location {{ mosquitto_db_dir }}/
  persistence_file mosquitto.db

  # plain MQTT
  listener {{ mosquitto_port }} {{ mosquitto_bind_address }}

# ____________________ nginx
www_root_dir: "{% if ansible_os_family == 'FreeBSD' %}/usr/local/www/nginx{% elif ansible_os_family == 'OpenBSD' %}/var/www/htdocs{% elif ansible_os_family == 'Debian' %}/var/www/html{% elif ansible_os_family == 'RedHat' %}/usr/share/nginx/html{% endif %}"
nginx_flags: -q
nginx_config: |
  {% if ansible_os_family == 'Debian' or ansible_os_family == 'RedHat' %}
  user {{ nginx_user }};
  pid /run/nginx.pid;
  {% endif %}
  worker_processes 1;
  error_log {{ nginx_error_log_file }};
  events {
    worker_connections 1024;
  }
  http {
    include {{ nginx_conf_dir }}/mime.types;
    access_log {{ nginx_access_log_file }};
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    include {{ nginx_conf_fragments_dir }}/openhab.conf;
  }
nginx_config_fragments:
  - name: openhab.conf
    config: |
      server {
        listen 80;
        root {{ www_root_dir }};
        index index.html index.htm;
        location /grafana/ {
          proxy_pass http://localhost:3000/;
        }
        # XXX OpenHab does not support sub-directory in URL
        location / {
          proxy_pass                          http://localhost:8080/;
          proxy_set_header Host               $http_host;
          proxy_set_header X-Real-IP          $remote_addr;
          proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto  $scheme;
        }
      }
    state: present
